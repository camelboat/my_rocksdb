// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logAndApply.proto

#include "logAndApply.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_logAndApply_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteFile_logAndApply_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logAndApply_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteFiles_logAndApply_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logAndApply_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EditLists_EditList_logAndApply_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logAndApply_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EditLists_EditList_VersionEdit_logAndApply_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logAndApply_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewFile_logAndApply_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logAndApply_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewFile_FileMetaData_logAndApply_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logAndApply_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewFile_FileMetaData_FileDescriptor_logAndApply_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logAndApply_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewFiles_logAndApply_2eproto;
namespace logapply {
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
class EditLists_EditList_VersionEditDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EditLists_EditList_VersionEdit> _instance;
} _EditLists_EditList_VersionEdit_default_instance_;
class EditLists_EditListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EditLists_EditList> _instance;
} _EditLists_EditList_default_instance_;
class EditListsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EditLists> _instance;
} _EditLists_default_instance_;
class NewFile_FileMetaData_FileDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewFile_FileMetaData_FileDescriptor> _instance;
} _NewFile_FileMetaData_FileDescriptor_default_instance_;
class NewFile_FileMetaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewFile_FileMetaData> _instance;
} _NewFile_FileMetaData_default_instance_;
class NewFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewFile> _instance;
} _NewFile_default_instance_;
class NewFilesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewFiles> _instance;
} _NewFiles_default_instance_;
class DeleteFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteFile> _instance;
} _DeleteFile_default_instance_;
class DeleteFilesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteFiles> _instance;
} _DeleteFiles_default_instance_;
}  // namespace logapply
static void InitDefaultsscc_info_DeleteFile_logAndApply_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logapply::_DeleteFile_default_instance_;
    new (ptr) ::logapply::DeleteFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logapply::DeleteFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteFile_logAndApply_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteFile_logAndApply_2eproto}, {}};

static void InitDefaultsscc_info_DeleteFiles_logAndApply_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logapply::_DeleteFiles_default_instance_;
    new (ptr) ::logapply::DeleteFiles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logapply::DeleteFiles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteFiles_logAndApply_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteFiles_logAndApply_2eproto}, {
      &scc_info_DeleteFile_logAndApply_2eproto.base,}};

static void InitDefaultsscc_info_EditLists_logAndApply_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logapply::_EditLists_default_instance_;
    new (ptr) ::logapply::EditLists();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logapply::EditLists::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EditLists_logAndApply_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EditLists_logAndApply_2eproto}, {
      &scc_info_EditLists_EditList_logAndApply_2eproto.base,}};

static void InitDefaultsscc_info_EditLists_EditList_logAndApply_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logapply::_EditLists_EditList_default_instance_;
    new (ptr) ::logapply::EditLists_EditList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logapply::EditLists_EditList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EditLists_EditList_logAndApply_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EditLists_EditList_logAndApply_2eproto}, {
      &scc_info_EditLists_EditList_VersionEdit_logAndApply_2eproto.base,}};

static void InitDefaultsscc_info_EditLists_EditList_VersionEdit_logAndApply_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logapply::_EditLists_EditList_VersionEdit_default_instance_;
    new (ptr) ::logapply::EditLists_EditList_VersionEdit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logapply::EditLists_EditList_VersionEdit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EditLists_EditList_VersionEdit_logAndApply_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EditLists_EditList_VersionEdit_logAndApply_2eproto}, {
      &scc_info_NewFiles_logAndApply_2eproto.base,
      &scc_info_DeleteFiles_logAndApply_2eproto.base,}};

static void InitDefaultsscc_info_NewFile_logAndApply_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logapply::_NewFile_default_instance_;
    new (ptr) ::logapply::NewFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logapply::NewFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewFile_logAndApply_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NewFile_logAndApply_2eproto}, {
      &scc_info_NewFile_FileMetaData_logAndApply_2eproto.base,}};

static void InitDefaultsscc_info_NewFile_FileMetaData_logAndApply_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logapply::_NewFile_FileMetaData_default_instance_;
    new (ptr) ::logapply::NewFile_FileMetaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logapply::NewFile_FileMetaData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewFile_FileMetaData_logAndApply_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NewFile_FileMetaData_logAndApply_2eproto}, {
      &scc_info_NewFile_FileMetaData_FileDescriptor_logAndApply_2eproto.base,}};

static void InitDefaultsscc_info_NewFile_FileMetaData_FileDescriptor_logAndApply_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logapply::_NewFile_FileMetaData_FileDescriptor_default_instance_;
    new (ptr) ::logapply::NewFile_FileMetaData_FileDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logapply::NewFile_FileMetaData_FileDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewFile_FileMetaData_FileDescriptor_logAndApply_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewFile_FileMetaData_FileDescriptor_logAndApply_2eproto}, {}};

static void InitDefaultsscc_info_NewFiles_logAndApply_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logapply::_NewFiles_default_instance_;
    new (ptr) ::logapply::NewFiles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logapply::NewFiles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewFiles_logAndApply_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NewFiles_logAndApply_2eproto}, {
      &scc_info_NewFile_logAndApply_2eproto.base,}};

static void InitDefaultsscc_info_Response_logAndApply_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logapply::_Response_default_instance_;
    new (ptr) ::logapply::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logapply::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_logAndApply_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_logAndApply_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_logAndApply_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_logAndApply_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_logAndApply_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_logAndApply_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logapply::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logapply::Response, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logapply::EditLists_EditList_VersionEdit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logapply::EditLists_EditList_VersionEdit, added_),
  PROTOBUF_FIELD_OFFSET(::logapply::EditLists_EditList_VersionEdit, dels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logapply::EditLists_EditList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logapply::EditLists_EditList, version_edit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logapply::EditLists, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logapply::EditLists, edit_list_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData_FileDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData_FileDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData_FileDescriptor, file_number_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData_FileDescriptor, file_size_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData_FileDescriptor, smallest_seqno_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData_FileDescriptor, largest_seqno_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData, fd_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData, smallest_key_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData, largest_key_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData, oldest_ancestor_time_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData, file_creation_time_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData, file_checksum_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile_FileMetaData, file_checksum_func_name_),
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile, level_),
  PROTOBUF_FIELD_OFFSET(::logapply::NewFile, meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logapply::NewFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logapply::NewFiles, new__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logapply::DeleteFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logapply::DeleteFile, level_),
  PROTOBUF_FIELD_OFFSET(::logapply::DeleteFile, file_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logapply::DeleteFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logapply::DeleteFiles, del_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::logapply::Response)},
  { 6, -1, sizeof(::logapply::EditLists_EditList_VersionEdit)},
  { 13, -1, sizeof(::logapply::EditLists_EditList)},
  { 19, -1, sizeof(::logapply::EditLists)},
  { 25, 34, sizeof(::logapply::NewFile_FileMetaData_FileDescriptor)},
  { 38, 50, sizeof(::logapply::NewFile_FileMetaData)},
  { 57, -1, sizeof(::logapply::NewFile)},
  { 64, -1, sizeof(::logapply::NewFiles)},
  { 70, -1, sizeof(::logapply::DeleteFile)},
  { 77, -1, sizeof(::logapply::DeleteFiles)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logapply::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logapply::_EditLists_EditList_VersionEdit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logapply::_EditLists_EditList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logapply::_EditLists_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logapply::_NewFile_FileMetaData_FileDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logapply::_NewFile_FileMetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logapply::_NewFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logapply::_NewFiles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logapply::_DeleteFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logapply::_DeleteFiles_default_instance_),
};

const char descriptor_table_protodef_logAndApply_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021logAndApply.proto\022\010logapply\"\026\n\010Respons"
  "e\022\n\n\002ok\030\001 \001(\010\"\340\001\n\tEditLists\022/\n\tedit_list"
  "\030\001 \003(\0132\034.logapply.EditLists.EditList\032\241\001\n"
  "\010EditList\022>\n\014version_edit\030\001 \003(\0132(.logapp"
  "ly.EditLists.EditList.VersionEdit\032U\n\013Ver"
  "sionEdit\022!\n\005added\030\001 \001(\0132\022.logapply.NewFi"
  "les\022#\n\004dels\030\002 \001(\0132\025.logapply.DeleteFiles"
  "\"\272\004\n\007NewFile\022\r\n\005level\030\001 \001(\005\022,\n\004meta\030\002 \001("
  "\0132\036.logapply.NewFile.FileMetaData\032\361\003\n\014Fi"
  "leMetaData\0229\n\002fd\030\001 \001(\0132-.logapply.NewFil"
  "e.FileMetaData.FileDescriptor\022\024\n\014smalles"
  "t_key\030\002 \001(\t\022\023\n\013largest_key\030\003 \001(\t\022!\n\024olde"
  "st_ancestor_time\030\004 \001(\004H\000\210\001\001\022\037\n\022file_crea"
  "tion_time\030\005 \001(\004H\001\210\001\001\022\032\n\rfile_checksum\030\006 "
  "\001(\tH\002\210\001\001\022$\n\027file_checksum_func_name\030\007 \001("
  "\tH\003\210\001\001\032\226\001\n\016FileDescriptor\022\023\n\013file_number"
  "\030\001 \001(\004\022\021\n\tfile_size\030\002 \001(\004\022\033\n\016smallest_se"
  "qno\030\003 \001(\004H\000\210\001\001\022\032\n\rlargest_seqno\030\004 \001(\004H\001\210"
  "\001\001B\021\n\017_smallest_seqnoB\020\n\016_largest_seqnoB"
  "\027\n\025_oldest_ancestor_timeB\025\n\023_file_creati"
  "on_timeB\020\n\016_file_checksumB\032\n\030_file_check"
  "sum_func_name\"*\n\010NewFiles\022\036\n\003new\030\001 \003(\0132\021"
  ".logapply.NewFile\"0\n\nDeleteFile\022\r\n\005level"
  "\030\001 \001(\005\022\023\n\013file_number\030\002 \001(\004\"0\n\013DeleteFil"
  "es\022!\n\003del\030\001 \003(\0132\024.logapply.DeleteFile2G\n"
  "\013logAndApply\0228\n\013logAndApply\022\023.logapply.E"
  "ditLists\032\022.logapply.Response\"\000B6\n\032io.grp"
  "c.rubble.logAndApplyB\020logAndApplyProtoP\001"
  "\242\002\003lAAb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_logAndApply_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_logAndApply_2eproto_sccs[10] = {
  &scc_info_DeleteFile_logAndApply_2eproto.base,
  &scc_info_DeleteFiles_logAndApply_2eproto.base,
  &scc_info_EditLists_logAndApply_2eproto.base,
  &scc_info_EditLists_EditList_logAndApply_2eproto.base,
  &scc_info_EditLists_EditList_VersionEdit_logAndApply_2eproto.base,
  &scc_info_NewFile_logAndApply_2eproto.base,
  &scc_info_NewFile_FileMetaData_logAndApply_2eproto.base,
  &scc_info_NewFile_FileMetaData_FileDescriptor_logAndApply_2eproto.base,
  &scc_info_NewFiles_logAndApply_2eproto.base,
  &scc_info_Response_logAndApply_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_logAndApply_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logAndApply_2eproto = {
  false, false, descriptor_table_protodef_logAndApply_2eproto, "logAndApply.proto", 1134,
  &descriptor_table_logAndApply_2eproto_once, descriptor_table_logAndApply_2eproto_sccs, descriptor_table_logAndApply_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_logAndApply_2eproto::offsets,
  file_level_metadata_logAndApply_2eproto, 10, file_level_enum_descriptors_logAndApply_2eproto, file_level_service_descriptors_logAndApply_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_logAndApply_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_logAndApply_2eproto)), true);
namespace logapply {

// ===================================================================

void Response::InitAsDefaultInstance() {
}
class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logapply.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:logapply.Response)
}

void Response::SharedCtor() {
  ok_ = false;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:logapply.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_logAndApply_2eproto.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:logapply.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logapply.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logapply.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logapply.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logapply.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logapply.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logapply.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logapply.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logapply.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logapply.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EditLists_EditList_VersionEdit::InitAsDefaultInstance() {
  ::logapply::_EditLists_EditList_VersionEdit_default_instance_._instance.get_mutable()->added_ = const_cast< ::logapply::NewFiles*>(
      ::logapply::NewFiles::internal_default_instance());
  ::logapply::_EditLists_EditList_VersionEdit_default_instance_._instance.get_mutable()->dels_ = const_cast< ::logapply::DeleteFiles*>(
      ::logapply::DeleteFiles::internal_default_instance());
}
class EditLists_EditList_VersionEdit::_Internal {
 public:
  static const ::logapply::NewFiles& added(const EditLists_EditList_VersionEdit* msg);
  static const ::logapply::DeleteFiles& dels(const EditLists_EditList_VersionEdit* msg);
};

const ::logapply::NewFiles&
EditLists_EditList_VersionEdit::_Internal::added(const EditLists_EditList_VersionEdit* msg) {
  return *msg->added_;
}
const ::logapply::DeleteFiles&
EditLists_EditList_VersionEdit::_Internal::dels(const EditLists_EditList_VersionEdit* msg) {
  return *msg->dels_;
}
EditLists_EditList_VersionEdit::EditLists_EditList_VersionEdit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logapply.EditLists.EditList.VersionEdit)
}
EditLists_EditList_VersionEdit::EditLists_EditList_VersionEdit(const EditLists_EditList_VersionEdit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_added()) {
    added_ = new ::logapply::NewFiles(*from.added_);
  } else {
    added_ = nullptr;
  }
  if (from._internal_has_dels()) {
    dels_ = new ::logapply::DeleteFiles(*from.dels_);
  } else {
    dels_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:logapply.EditLists.EditList.VersionEdit)
}

void EditLists_EditList_VersionEdit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EditLists_EditList_VersionEdit_logAndApply_2eproto.base);
  ::memset(&added_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dels_) -
      reinterpret_cast<char*>(&added_)) + sizeof(dels_));
}

EditLists_EditList_VersionEdit::~EditLists_EditList_VersionEdit() {
  // @@protoc_insertion_point(destructor:logapply.EditLists.EditList.VersionEdit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EditLists_EditList_VersionEdit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete added_;
  if (this != internal_default_instance()) delete dels_;
}

void EditLists_EditList_VersionEdit::ArenaDtor(void* object) {
  EditLists_EditList_VersionEdit* _this = reinterpret_cast< EditLists_EditList_VersionEdit* >(object);
  (void)_this;
}
void EditLists_EditList_VersionEdit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditLists_EditList_VersionEdit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EditLists_EditList_VersionEdit& EditLists_EditList_VersionEdit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EditLists_EditList_VersionEdit_logAndApply_2eproto.base);
  return *internal_default_instance();
}


void EditLists_EditList_VersionEdit::Clear() {
// @@protoc_insertion_point(message_clear_start:logapply.EditLists.EditList.VersionEdit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && added_ != nullptr) {
    delete added_;
  }
  added_ = nullptr;
  if (GetArena() == nullptr && dels_ != nullptr) {
    delete dels_;
  }
  dels_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditLists_EditList_VersionEdit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .logapply.NewFiles added = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_added(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .logapply.DeleteFiles dels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditLists_EditList_VersionEdit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logapply.EditLists.EditList.VersionEdit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logapply.NewFiles added = 1;
  if (this->has_added()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::added(this), target, stream);
  }

  // .logapply.DeleteFiles dels = 2;
  if (this->has_dels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dels(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logapply.EditLists.EditList.VersionEdit)
  return target;
}

size_t EditLists_EditList_VersionEdit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logapply.EditLists.EditList.VersionEdit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .logapply.NewFiles added = 1;
  if (this->has_added()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *added_);
  }

  // .logapply.DeleteFiles dels = 2;
  if (this->has_dels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dels_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditLists_EditList_VersionEdit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logapply.EditLists.EditList.VersionEdit)
  GOOGLE_DCHECK_NE(&from, this);
  const EditLists_EditList_VersionEdit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EditLists_EditList_VersionEdit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logapply.EditLists.EditList.VersionEdit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logapply.EditLists.EditList.VersionEdit)
    MergeFrom(*source);
  }
}

void EditLists_EditList_VersionEdit::MergeFrom(const EditLists_EditList_VersionEdit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logapply.EditLists.EditList.VersionEdit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_added()) {
    _internal_mutable_added()->::logapply::NewFiles::MergeFrom(from._internal_added());
  }
  if (from.has_dels()) {
    _internal_mutable_dels()->::logapply::DeleteFiles::MergeFrom(from._internal_dels());
  }
}

void EditLists_EditList_VersionEdit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logapply.EditLists.EditList.VersionEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditLists_EditList_VersionEdit::CopyFrom(const EditLists_EditList_VersionEdit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logapply.EditLists.EditList.VersionEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditLists_EditList_VersionEdit::IsInitialized() const {
  return true;
}

void EditLists_EditList_VersionEdit::InternalSwap(EditLists_EditList_VersionEdit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EditLists_EditList_VersionEdit, dels_)
      + sizeof(EditLists_EditList_VersionEdit::dels_)
      - PROTOBUF_FIELD_OFFSET(EditLists_EditList_VersionEdit, added_)>(
          reinterpret_cast<char*>(&added_),
          reinterpret_cast<char*>(&other->added_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EditLists_EditList_VersionEdit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EditLists_EditList::InitAsDefaultInstance() {
}
class EditLists_EditList::_Internal {
 public:
};

EditLists_EditList::EditLists_EditList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  version_edit_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logapply.EditLists.EditList)
}
EditLists_EditList::EditLists_EditList(const EditLists_EditList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      version_edit_(from.version_edit_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:logapply.EditLists.EditList)
}

void EditLists_EditList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EditLists_EditList_logAndApply_2eproto.base);
}

EditLists_EditList::~EditLists_EditList() {
  // @@protoc_insertion_point(destructor:logapply.EditLists.EditList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EditLists_EditList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EditLists_EditList::ArenaDtor(void* object) {
  EditLists_EditList* _this = reinterpret_cast< EditLists_EditList* >(object);
  (void)_this;
}
void EditLists_EditList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditLists_EditList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EditLists_EditList& EditLists_EditList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EditLists_EditList_logAndApply_2eproto.base);
  return *internal_default_instance();
}


void EditLists_EditList::Clear() {
// @@protoc_insertion_point(message_clear_start:logapply.EditLists.EditList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_edit_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditLists_EditList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .logapply.EditLists.EditList.VersionEdit version_edit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_version_edit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditLists_EditList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logapply.EditLists.EditList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logapply.EditLists.EditList.VersionEdit version_edit = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_version_edit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_version_edit(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logapply.EditLists.EditList)
  return target;
}

size_t EditLists_EditList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logapply.EditLists.EditList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .logapply.EditLists.EditList.VersionEdit version_edit = 1;
  total_size += 1UL * this->_internal_version_edit_size();
  for (const auto& msg : this->version_edit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditLists_EditList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logapply.EditLists.EditList)
  GOOGLE_DCHECK_NE(&from, this);
  const EditLists_EditList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EditLists_EditList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logapply.EditLists.EditList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logapply.EditLists.EditList)
    MergeFrom(*source);
  }
}

void EditLists_EditList::MergeFrom(const EditLists_EditList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logapply.EditLists.EditList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  version_edit_.MergeFrom(from.version_edit_);
}

void EditLists_EditList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logapply.EditLists.EditList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditLists_EditList::CopyFrom(const EditLists_EditList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logapply.EditLists.EditList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditLists_EditList::IsInitialized() const {
  return true;
}

void EditLists_EditList::InternalSwap(EditLists_EditList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_edit_.InternalSwap(&other->version_edit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditLists_EditList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EditLists::InitAsDefaultInstance() {
}
class EditLists::_Internal {
 public:
};

EditLists::EditLists(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edit_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logapply.EditLists)
}
EditLists::EditLists(const EditLists& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edit_list_(from.edit_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:logapply.EditLists)
}

void EditLists::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EditLists_logAndApply_2eproto.base);
}

EditLists::~EditLists() {
  // @@protoc_insertion_point(destructor:logapply.EditLists)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EditLists::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EditLists::ArenaDtor(void* object) {
  EditLists* _this = reinterpret_cast< EditLists* >(object);
  (void)_this;
}
void EditLists::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditLists::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EditLists& EditLists::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EditLists_logAndApply_2eproto.base);
  return *internal_default_instance();
}


void EditLists::Clear() {
// @@protoc_insertion_point(message_clear_start:logapply.EditLists)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edit_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditLists::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .logapply.EditLists.EditList edit_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edit_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditLists::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logapply.EditLists)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logapply.EditLists.EditList edit_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edit_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_edit_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logapply.EditLists)
  return target;
}

size_t EditLists::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logapply.EditLists)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .logapply.EditLists.EditList edit_list = 1;
  total_size += 1UL * this->_internal_edit_list_size();
  for (const auto& msg : this->edit_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditLists::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logapply.EditLists)
  GOOGLE_DCHECK_NE(&from, this);
  const EditLists* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EditLists>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logapply.EditLists)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logapply.EditLists)
    MergeFrom(*source);
  }
}

void EditLists::MergeFrom(const EditLists& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logapply.EditLists)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edit_list_.MergeFrom(from.edit_list_);
}

void EditLists::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logapply.EditLists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditLists::CopyFrom(const EditLists& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logapply.EditLists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditLists::IsInitialized() const {
  return true;
}

void EditLists::InternalSwap(EditLists* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edit_list_.InternalSwap(&other->edit_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditLists::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewFile_FileMetaData_FileDescriptor::InitAsDefaultInstance() {
}
class NewFile_FileMetaData_FileDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<NewFile_FileMetaData_FileDescriptor>()._has_bits_);
  static void set_has_smallest_seqno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_largest_seqno(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NewFile_FileMetaData_FileDescriptor::NewFile_FileMetaData_FileDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logapply.NewFile.FileMetaData.FileDescriptor)
}
NewFile_FileMetaData_FileDescriptor::NewFile_FileMetaData_FileDescriptor(const NewFile_FileMetaData_FileDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&file_number_, &from.file_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&largest_seqno_) -
    reinterpret_cast<char*>(&file_number_)) + sizeof(largest_seqno_));
  // @@protoc_insertion_point(copy_constructor:logapply.NewFile.FileMetaData.FileDescriptor)
}

void NewFile_FileMetaData_FileDescriptor::SharedCtor() {
  ::memset(&file_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&largest_seqno_) -
      reinterpret_cast<char*>(&file_number_)) + sizeof(largest_seqno_));
}

NewFile_FileMetaData_FileDescriptor::~NewFile_FileMetaData_FileDescriptor() {
  // @@protoc_insertion_point(destructor:logapply.NewFile.FileMetaData.FileDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewFile_FileMetaData_FileDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NewFile_FileMetaData_FileDescriptor::ArenaDtor(void* object) {
  NewFile_FileMetaData_FileDescriptor* _this = reinterpret_cast< NewFile_FileMetaData_FileDescriptor* >(object);
  (void)_this;
}
void NewFile_FileMetaData_FileDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewFile_FileMetaData_FileDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewFile_FileMetaData_FileDescriptor& NewFile_FileMetaData_FileDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewFile_FileMetaData_FileDescriptor_logAndApply_2eproto.base);
  return *internal_default_instance();
}


void NewFile_FileMetaData_FileDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:logapply.NewFile.FileMetaData.FileDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&file_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_size_) -
      reinterpret_cast<char*>(&file_number_)) + sizeof(file_size_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&smallest_seqno_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&largest_seqno_) -
        reinterpret_cast<char*>(&smallest_seqno_)) + sizeof(largest_seqno_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewFile_FileMetaData_FileDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 file_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          file_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 smallest_seqno = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_smallest_seqno(&has_bits);
          smallest_seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 largest_seqno = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_largest_seqno(&has_bits);
          largest_seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewFile_FileMetaData_FileDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logapply.NewFile.FileMetaData.FileDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 file_number = 1;
  if (this->file_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_file_number(), target);
  }

  // uint64 file_size = 2;
  if (this->file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_file_size(), target);
  }

  // uint64 smallest_seqno = 3;
  if (_internal_has_smallest_seqno()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_smallest_seqno(), target);
  }

  // uint64 largest_seqno = 4;
  if (_internal_has_largest_seqno()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_largest_seqno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logapply.NewFile.FileMetaData.FileDescriptor)
  return target;
}

size_t NewFile_FileMetaData_FileDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logapply.NewFile.FileMetaData.FileDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 file_number = 1;
  if (this->file_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_file_number());
  }

  // uint64 file_size = 2;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_file_size());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // uint64 smallest_seqno = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_smallest_seqno());
    }

    // uint64 largest_seqno = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_largest_seqno());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewFile_FileMetaData_FileDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logapply.NewFile.FileMetaData.FileDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const NewFile_FileMetaData_FileDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewFile_FileMetaData_FileDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logapply.NewFile.FileMetaData.FileDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logapply.NewFile.FileMetaData.FileDescriptor)
    MergeFrom(*source);
  }
}

void NewFile_FileMetaData_FileDescriptor::MergeFrom(const NewFile_FileMetaData_FileDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logapply.NewFile.FileMetaData.FileDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_number() != 0) {
    _internal_set_file_number(from._internal_file_number());
  }
  if (from.file_size() != 0) {
    _internal_set_file_size(from._internal_file_size());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      smallest_seqno_ = from.smallest_seqno_;
    }
    if (cached_has_bits & 0x00000002u) {
      largest_seqno_ = from.largest_seqno_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewFile_FileMetaData_FileDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logapply.NewFile.FileMetaData.FileDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewFile_FileMetaData_FileDescriptor::CopyFrom(const NewFile_FileMetaData_FileDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logapply.NewFile.FileMetaData.FileDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFile_FileMetaData_FileDescriptor::IsInitialized() const {
  return true;
}

void NewFile_FileMetaData_FileDescriptor::InternalSwap(NewFile_FileMetaData_FileDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewFile_FileMetaData_FileDescriptor, largest_seqno_)
      + sizeof(NewFile_FileMetaData_FileDescriptor::largest_seqno_)
      - PROTOBUF_FIELD_OFFSET(NewFile_FileMetaData_FileDescriptor, file_number_)>(
          reinterpret_cast<char*>(&file_number_),
          reinterpret_cast<char*>(&other->file_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewFile_FileMetaData_FileDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewFile_FileMetaData::InitAsDefaultInstance() {
  ::logapply::_NewFile_FileMetaData_default_instance_._instance.get_mutable()->fd_ = const_cast< ::logapply::NewFile_FileMetaData_FileDescriptor*>(
      ::logapply::NewFile_FileMetaData_FileDescriptor::internal_default_instance());
}
class NewFile_FileMetaData::_Internal {
 public:
  using HasBits = decltype(std::declval<NewFile_FileMetaData>()._has_bits_);
  static const ::logapply::NewFile_FileMetaData_FileDescriptor& fd(const NewFile_FileMetaData* msg);
  static void set_has_oldest_ancestor_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_checksum_func_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::logapply::NewFile_FileMetaData_FileDescriptor&
NewFile_FileMetaData::_Internal::fd(const NewFile_FileMetaData* msg) {
  return *msg->fd_;
}
NewFile_FileMetaData::NewFile_FileMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logapply.NewFile.FileMetaData)
}
NewFile_FileMetaData::NewFile_FileMetaData(const NewFile_FileMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  smallest_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_smallest_key().empty()) {
    smallest_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_smallest_key(),
      GetArena());
  }
  largest_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_largest_key().empty()) {
    largest_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_largest_key(),
      GetArena());
  }
  file_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_checksum()) {
    file_checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_checksum(),
      GetArena());
  }
  file_checksum_func_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_checksum_func_name()) {
    file_checksum_func_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_checksum_func_name(),
      GetArena());
  }
  if (from._internal_has_fd()) {
    fd_ = new ::logapply::NewFile_FileMetaData_FileDescriptor(*from.fd_);
  } else {
    fd_ = nullptr;
  }
  ::memcpy(&oldest_ancestor_time_, &from.oldest_ancestor_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_creation_time_) -
    reinterpret_cast<char*>(&oldest_ancestor_time_)) + sizeof(file_creation_time_));
  // @@protoc_insertion_point(copy_constructor:logapply.NewFile.FileMetaData)
}

void NewFile_FileMetaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewFile_FileMetaData_logAndApply_2eproto.base);
  smallest_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  largest_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_checksum_func_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_creation_time_) -
      reinterpret_cast<char*>(&fd_)) + sizeof(file_creation_time_));
}

NewFile_FileMetaData::~NewFile_FileMetaData() {
  // @@protoc_insertion_point(destructor:logapply.NewFile.FileMetaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewFile_FileMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  smallest_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  largest_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_checksum_func_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fd_;
}

void NewFile_FileMetaData::ArenaDtor(void* object) {
  NewFile_FileMetaData* _this = reinterpret_cast< NewFile_FileMetaData* >(object);
  (void)_this;
}
void NewFile_FileMetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewFile_FileMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewFile_FileMetaData& NewFile_FileMetaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewFile_FileMetaData_logAndApply_2eproto.base);
  return *internal_default_instance();
}


void NewFile_FileMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:logapply.NewFile.FileMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smallest_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  largest_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_checksum_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_checksum_func_name_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArena() == nullptr && fd_ != nullptr) {
    delete fd_;
  }
  fd_ = nullptr;
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&oldest_ancestor_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_creation_time_) -
        reinterpret_cast<char*>(&oldest_ancestor_time_)) + sizeof(file_creation_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewFile_FileMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .logapply.NewFile.FileMetaData.FileDescriptor fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string smallest_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_smallest_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "logapply.NewFile.FileMetaData.smallest_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string largest_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_largest_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "logapply.NewFile.FileMetaData.largest_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 oldest_ancestor_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_oldest_ancestor_time(&has_bits);
          oldest_ancestor_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_creation_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_file_creation_time(&has_bits);
          file_creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_checksum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_file_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "logapply.NewFile.FileMetaData.file_checksum"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_checksum_func_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_file_checksum_func_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "logapply.NewFile.FileMetaData.file_checksum_func_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewFile_FileMetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logapply.NewFile.FileMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logapply.NewFile.FileMetaData.FileDescriptor fd = 1;
  if (this->has_fd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fd(this), target, stream);
  }

  // string smallest_key = 2;
  if (this->smallest_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smallest_key().data(), static_cast<int>(this->_internal_smallest_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logapply.NewFile.FileMetaData.smallest_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_smallest_key(), target);
  }

  // string largest_key = 3;
  if (this->largest_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_largest_key().data(), static_cast<int>(this->_internal_largest_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logapply.NewFile.FileMetaData.largest_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_largest_key(), target);
  }

  // uint64 oldest_ancestor_time = 4;
  if (_internal_has_oldest_ancestor_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_oldest_ancestor_time(), target);
  }

  // uint64 file_creation_time = 5;
  if (_internal_has_file_creation_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_file_creation_time(), target);
  }

  // string file_checksum = 6;
  if (_internal_has_file_checksum()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_checksum().data(), static_cast<int>(this->_internal_file_checksum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logapply.NewFile.FileMetaData.file_checksum");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_file_checksum(), target);
  }

  // string file_checksum_func_name = 7;
  if (_internal_has_file_checksum_func_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_checksum_func_name().data(), static_cast<int>(this->_internal_file_checksum_func_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logapply.NewFile.FileMetaData.file_checksum_func_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_file_checksum_func_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logapply.NewFile.FileMetaData)
  return target;
}

size_t NewFile_FileMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logapply.NewFile.FileMetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string smallest_key = 2;
  if (this->smallest_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_smallest_key());
  }

  // string largest_key = 3;
  if (this->largest_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_largest_key());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string file_checksum = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_checksum());
    }

    // string file_checksum_func_name = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_checksum_func_name());
    }

  }
  // .logapply.NewFile.FileMetaData.FileDescriptor fd = 1;
  if (this->has_fd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fd_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // uint64 oldest_ancestor_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_oldest_ancestor_time());
    }

    // uint64 file_creation_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_file_creation_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewFile_FileMetaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logapply.NewFile.FileMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const NewFile_FileMetaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewFile_FileMetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logapply.NewFile.FileMetaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logapply.NewFile.FileMetaData)
    MergeFrom(*source);
  }
}

void NewFile_FileMetaData::MergeFrom(const NewFile_FileMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logapply.NewFile.FileMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.smallest_key().size() > 0) {
    _internal_set_smallest_key(from._internal_smallest_key());
  }
  if (from.largest_key().size() > 0) {
    _internal_set_largest_key(from._internal_largest_key());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_checksum(from._internal_file_checksum());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_checksum_func_name(from._internal_file_checksum_func_name());
    }
  }
  if (from.has_fd()) {
    _internal_mutable_fd()->::logapply::NewFile_FileMetaData_FileDescriptor::MergeFrom(from._internal_fd());
  }
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      oldest_ancestor_time_ = from.oldest_ancestor_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_creation_time_ = from.file_creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewFile_FileMetaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logapply.NewFile.FileMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewFile_FileMetaData::CopyFrom(const NewFile_FileMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logapply.NewFile.FileMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFile_FileMetaData::IsInitialized() const {
  return true;
}

void NewFile_FileMetaData::InternalSwap(NewFile_FileMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  smallest_key_.Swap(&other->smallest_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  largest_key_.Swap(&other->largest_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_checksum_.Swap(&other->file_checksum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_checksum_func_name_.Swap(&other->file_checksum_func_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewFile_FileMetaData, file_creation_time_)
      + sizeof(NewFile_FileMetaData::file_creation_time_)
      - PROTOBUF_FIELD_OFFSET(NewFile_FileMetaData, fd_)>(
          reinterpret_cast<char*>(&fd_),
          reinterpret_cast<char*>(&other->fd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewFile_FileMetaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewFile::InitAsDefaultInstance() {
  ::logapply::_NewFile_default_instance_._instance.get_mutable()->meta_ = const_cast< ::logapply::NewFile_FileMetaData*>(
      ::logapply::NewFile_FileMetaData::internal_default_instance());
}
class NewFile::_Internal {
 public:
  static const ::logapply::NewFile_FileMetaData& meta(const NewFile* msg);
};

const ::logapply::NewFile_FileMetaData&
NewFile::_Internal::meta(const NewFile* msg) {
  return *msg->meta_;
}
NewFile::NewFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logapply.NewFile)
}
NewFile::NewFile(const NewFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::logapply::NewFile_FileMetaData(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:logapply.NewFile)
}

void NewFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewFile_logAndApply_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(level_));
}

NewFile::~NewFile() {
  // @@protoc_insertion_point(destructor:logapply.NewFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
}

void NewFile::ArenaDtor(void* object) {
  NewFile* _this = reinterpret_cast< NewFile* >(object);
  (void)_this;
}
void NewFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewFile& NewFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewFile_logAndApply_2eproto.base);
  return *internal_default_instance();
}


void NewFile::Clear() {
// @@protoc_insertion_point(message_clear_start:logapply.NewFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .logapply.NewFile.FileMetaData meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logapply.NewFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // .logapply.NewFile.FileMetaData meta = 2;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logapply.NewFile)
  return target;
}

size_t NewFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logapply.NewFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .logapply.NewFile.FileMetaData meta = 2;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logapply.NewFile)
  GOOGLE_DCHECK_NE(&from, this);
  const NewFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logapply.NewFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logapply.NewFile)
    MergeFrom(*source);
  }
}

void NewFile::MergeFrom(const NewFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logapply.NewFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    _internal_mutable_meta()->::logapply::NewFile_FileMetaData::MergeFrom(from._internal_meta());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void NewFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logapply.NewFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewFile::CopyFrom(const NewFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logapply.NewFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFile::IsInitialized() const {
  return true;
}

void NewFile::InternalSwap(NewFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewFile, level_)
      + sizeof(NewFile::level_)
      - PROTOBUF_FIELD_OFFSET(NewFile, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewFiles::InitAsDefaultInstance() {
}
class NewFiles::_Internal {
 public:
};

NewFiles::NewFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  new__(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logapply.NewFiles)
}
NewFiles::NewFiles(const NewFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      new__(from.new__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:logapply.NewFiles)
}

void NewFiles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewFiles_logAndApply_2eproto.base);
}

NewFiles::~NewFiles() {
  // @@protoc_insertion_point(destructor:logapply.NewFiles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NewFiles::ArenaDtor(void* object) {
  NewFiles* _this = reinterpret_cast< NewFiles* >(object);
  (void)_this;
}
void NewFiles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewFiles& NewFiles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewFiles_logAndApply_2eproto.base);
  return *internal_default_instance();
}


void NewFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:logapply.NewFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new__.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewFiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .logapply.NewFile new = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewFiles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logapply.NewFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logapply.NewFile new = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_new_(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logapply.NewFiles)
  return target;
}

size_t NewFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logapply.NewFiles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .logapply.NewFile new = 1;
  total_size += 1UL * this->_internal_new__size();
  for (const auto& msg : this->new__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewFiles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logapply.NewFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const NewFiles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logapply.NewFiles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logapply.NewFiles)
    MergeFrom(*source);
  }
}

void NewFiles::MergeFrom(const NewFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logapply.NewFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new__.MergeFrom(from.new__);
}

void NewFiles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logapply.NewFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewFiles::CopyFrom(const NewFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logapply.NewFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFiles::IsInitialized() const {
  return true;
}

void NewFiles::InternalSwap(NewFiles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  new__.InternalSwap(&other->new__);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewFiles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteFile::InitAsDefaultInstance() {
}
class DeleteFile::_Internal {
 public:
};

DeleteFile::DeleteFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logapply.DeleteFile)
}
DeleteFile::DeleteFile(const DeleteFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&file_number_, &from.file_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&file_number_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:logapply.DeleteFile)
}

void DeleteFile::SharedCtor() {
  ::memset(&file_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&file_number_)) + sizeof(level_));
}

DeleteFile::~DeleteFile() {
  // @@protoc_insertion_point(destructor:logapply.DeleteFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteFile::ArenaDtor(void* object) {
  DeleteFile* _this = reinterpret_cast< DeleteFile* >(object);
  (void)_this;
}
void DeleteFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteFile& DeleteFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteFile_logAndApply_2eproto.base);
  return *internal_default_instance();
}


void DeleteFile::Clear() {
// @@protoc_insertion_point(message_clear_start:logapply.DeleteFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&file_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&file_number_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          file_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logapply.DeleteFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // uint64 file_number = 2;
  if (this->file_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_file_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logapply.DeleteFile)
  return target;
}

size_t DeleteFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logapply.DeleteFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 file_number = 2;
  if (this->file_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_file_number());
  }

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logapply.DeleteFile)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logapply.DeleteFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logapply.DeleteFile)
    MergeFrom(*source);
  }
}

void DeleteFile::MergeFrom(const DeleteFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logapply.DeleteFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_number() != 0) {
    _internal_set_file_number(from._internal_file_number());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void DeleteFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logapply.DeleteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFile::CopyFrom(const DeleteFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logapply.DeleteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFile::IsInitialized() const {
  return true;
}

void DeleteFile::InternalSwap(DeleteFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteFile, level_)
      + sizeof(DeleteFile::level_)
      - PROTOBUF_FIELD_OFFSET(DeleteFile, file_number_)>(
          reinterpret_cast<char*>(&file_number_),
          reinterpret_cast<char*>(&other->file_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteFiles::InitAsDefaultInstance() {
}
class DeleteFiles::_Internal {
 public:
};

DeleteFiles::DeleteFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  del_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logapply.DeleteFiles)
}
DeleteFiles::DeleteFiles(const DeleteFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      del_(from.del_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:logapply.DeleteFiles)
}

void DeleteFiles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteFiles_logAndApply_2eproto.base);
}

DeleteFiles::~DeleteFiles() {
  // @@protoc_insertion_point(destructor:logapply.DeleteFiles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteFiles::ArenaDtor(void* object) {
  DeleteFiles* _this = reinterpret_cast< DeleteFiles* >(object);
  (void)_this;
}
void DeleteFiles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteFiles& DeleteFiles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteFiles_logAndApply_2eproto.base);
  return *internal_default_instance();
}


void DeleteFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:logapply.DeleteFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  del_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteFiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .logapply.DeleteFile del = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_del(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFiles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logapply.DeleteFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logapply.DeleteFile del = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_del_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_del(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logapply.DeleteFiles)
  return target;
}

size_t DeleteFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logapply.DeleteFiles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .logapply.DeleteFile del = 1;
  total_size += 1UL * this->_internal_del_size();
  for (const auto& msg : this->del_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFiles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logapply.DeleteFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFiles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logapply.DeleteFiles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logapply.DeleteFiles)
    MergeFrom(*source);
  }
}

void DeleteFiles::MergeFrom(const DeleteFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logapply.DeleteFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  del_.MergeFrom(from.del_);
}

void DeleteFiles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logapply.DeleteFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFiles::CopyFrom(const DeleteFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logapply.DeleteFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFiles::IsInitialized() const {
  return true;
}

void DeleteFiles::InternalSwap(DeleteFiles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  del_.InternalSwap(&other->del_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFiles::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace logapply
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::logapply::Response* Arena::CreateMaybeMessage< ::logapply::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logapply::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::logapply::EditLists_EditList_VersionEdit* Arena::CreateMaybeMessage< ::logapply::EditLists_EditList_VersionEdit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logapply::EditLists_EditList_VersionEdit >(arena);
}
template<> PROTOBUF_NOINLINE ::logapply::EditLists_EditList* Arena::CreateMaybeMessage< ::logapply::EditLists_EditList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logapply::EditLists_EditList >(arena);
}
template<> PROTOBUF_NOINLINE ::logapply::EditLists* Arena::CreateMaybeMessage< ::logapply::EditLists >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logapply::EditLists >(arena);
}
template<> PROTOBUF_NOINLINE ::logapply::NewFile_FileMetaData_FileDescriptor* Arena::CreateMaybeMessage< ::logapply::NewFile_FileMetaData_FileDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logapply::NewFile_FileMetaData_FileDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::logapply::NewFile_FileMetaData* Arena::CreateMaybeMessage< ::logapply::NewFile_FileMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logapply::NewFile_FileMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::logapply::NewFile* Arena::CreateMaybeMessage< ::logapply::NewFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logapply::NewFile >(arena);
}
template<> PROTOBUF_NOINLINE ::logapply::NewFiles* Arena::CreateMaybeMessage< ::logapply::NewFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logapply::NewFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::logapply::DeleteFile* Arena::CreateMaybeMessage< ::logapply::DeleteFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logapply::DeleteFile >(arena);
}
template<> PROTOBUF_NOINLINE ::logapply::DeleteFiles* Arena::CreateMaybeMessage< ::logapply::DeleteFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logapply::DeleteFiles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
