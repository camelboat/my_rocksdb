// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rubble_kv_store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rubble_5fkv_5fstore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rubble_5fkv_5fstore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rubble_5fkv_5fstore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rubble_5fkv_5fstore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rubble_5fkv_5fstore_2eproto;
namespace rubble {
class Op;
class OpDefaultTypeInternal;
extern OpDefaultTypeInternal _Op_default_instance_;
class OpReplies;
class OpRepliesDefaultTypeInternal;
extern OpRepliesDefaultTypeInternal _OpReplies_default_instance_;
class OpReply;
class OpReplyDefaultTypeInternal;
extern OpReplyDefaultTypeInternal _OpReply_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class SingleOp;
class SingleOpDefaultTypeInternal;
extern SingleOpDefaultTypeInternal _SingleOp_default_instance_;
class SingleOpReply;
class SingleOpReplyDefaultTypeInternal;
extern SingleOpReplyDefaultTypeInternal _SingleOpReply_default_instance_;
class SyncReply;
class SyncReplyDefaultTypeInternal;
extern SyncReplyDefaultTypeInternal _SyncReply_default_instance_;
class SyncRequest;
class SyncRequestDefaultTypeInternal;
extern SyncRequestDefaultTypeInternal _SyncRequest_default_instance_;
}  // namespace rubble
PROTOBUF_NAMESPACE_OPEN
template<> ::rubble::Op* Arena::CreateMaybeMessage<::rubble::Op>(Arena*);
template<> ::rubble::OpReplies* Arena::CreateMaybeMessage<::rubble::OpReplies>(Arena*);
template<> ::rubble::OpReply* Arena::CreateMaybeMessage<::rubble::OpReply>(Arena*);
template<> ::rubble::Reply* Arena::CreateMaybeMessage<::rubble::Reply>(Arena*);
template<> ::rubble::SingleOp* Arena::CreateMaybeMessage<::rubble::SingleOp>(Arena*);
template<> ::rubble::SingleOpReply* Arena::CreateMaybeMessage<::rubble::SingleOpReply>(Arena*);
template<> ::rubble::SyncReply* Arena::CreateMaybeMessage<::rubble::SyncReply>(Arena*);
template<> ::rubble::SyncRequest* Arena::CreateMaybeMessage<::rubble::SyncRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rubble {

enum SingleOp_OpType : int {
  SingleOp_OpType_GET = 0,
  SingleOp_OpType_PUT = 1,
  SingleOp_OpType_DELETE = 2,
  SingleOp_OpType_UPDATE = 3,
  SingleOp_OpType_SingleOp_OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SingleOp_OpType_SingleOp_OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SingleOp_OpType_IsValid(int value);
constexpr SingleOp_OpType SingleOp_OpType_OpType_MIN = SingleOp_OpType_GET;
constexpr SingleOp_OpType SingleOp_OpType_OpType_MAX = SingleOp_OpType_UPDATE;
constexpr int SingleOp_OpType_OpType_ARRAYSIZE = SingleOp_OpType_OpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SingleOp_OpType_descriptor();
template<typename T>
inline const std::string& SingleOp_OpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SingleOp_OpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SingleOp_OpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SingleOp_OpType_descriptor(), enum_t_value);
}
inline bool SingleOp_OpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SingleOp_OpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SingleOp_OpType>(
    SingleOp_OpType_descriptor(), name, value);
}
enum SingleOpReply_OpType : int {
  SingleOpReply_OpType_GET = 0,
  SingleOpReply_OpType_PUT = 1,
  SingleOpReply_OpType_DELETE = 2,
  SingleOpReply_OpType_UPDATE = 3,
  SingleOpReply_OpType_SingleOpReply_OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SingleOpReply_OpType_SingleOpReply_OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SingleOpReply_OpType_IsValid(int value);
constexpr SingleOpReply_OpType SingleOpReply_OpType_OpType_MIN = SingleOpReply_OpType_GET;
constexpr SingleOpReply_OpType SingleOpReply_OpType_OpType_MAX = SingleOpReply_OpType_UPDATE;
constexpr int SingleOpReply_OpType_OpType_ARRAYSIZE = SingleOpReply_OpType_OpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SingleOpReply_OpType_descriptor();
template<typename T>
inline const std::string& SingleOpReply_OpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SingleOpReply_OpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SingleOpReply_OpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SingleOpReply_OpType_descriptor(), enum_t_value);
}
inline bool SingleOpReply_OpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SingleOpReply_OpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SingleOpReply_OpType>(
    SingleOpReply_OpType_descriptor(), name, value);
}
// ===================================================================

class Op PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rubble.Op) */ {
 public:
  inline Op() : Op(nullptr) {}
  virtual ~Op();

  Op(const Op& from);
  Op(Op&& from) noexcept
    : Op() {
    *this = ::std::move(from);
  }

  inline Op& operator=(const Op& from) {
    CopyFrom(from);
    return *this;
  }
  inline Op& operator=(Op&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Op& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Op* internal_default_instance() {
    return reinterpret_cast<const Op*>(
               &_Op_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Op& a, Op& b) {
    a.Swap(&b);
  }
  inline void Swap(Op* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Op* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Op* New() const final {
    return CreateMaybeMessage<Op>(nullptr);
  }

  Op* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Op>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Op& from);
  void MergeFrom(const Op& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Op* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rubble.Op";
  }
  protected:
  explicit Op(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rubble_5fkv_5fstore_2eproto);
    return ::descriptor_table_rubble_5fkv_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 1,
  };
  // repeated .rubble.SingleOp ops = 1;
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::rubble::SingleOp* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::SingleOp >*
      mutable_ops();
  private:
  const ::rubble::SingleOp& _internal_ops(int index) const;
  ::rubble::SingleOp* _internal_add_ops();
  public:
  const ::rubble::SingleOp& ops(int index) const;
  ::rubble::SingleOp* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::SingleOp >&
      ops() const;

  // @@protoc_insertion_point(class_scope:rubble.Op)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::SingleOp > ops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rubble_5fkv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class SingleOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rubble.SingleOp) */ {
 public:
  inline SingleOp() : SingleOp(nullptr) {}
  virtual ~SingleOp();

  SingleOp(const SingleOp& from);
  SingleOp(SingleOp&& from) noexcept
    : SingleOp() {
    *this = ::std::move(from);
  }

  inline SingleOp& operator=(const SingleOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleOp& operator=(SingleOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleOp* internal_default_instance() {
    return reinterpret_cast<const SingleOp*>(
               &_SingleOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SingleOp& a, SingleOp& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleOp* New() const final {
    return CreateMaybeMessage<SingleOp>(nullptr);
  }

  SingleOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleOp& from);
  void MergeFrom(const SingleOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rubble.SingleOp";
  }
  protected:
  explicit SingleOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rubble_5fkv_5fstore_2eproto);
    return ::descriptor_table_rubble_5fkv_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SingleOp_OpType OpType;
  static constexpr OpType GET =
    SingleOp_OpType_GET;
  static constexpr OpType PUT =
    SingleOp_OpType_PUT;
  static constexpr OpType DELETE =
    SingleOp_OpType_DELETE;
  static constexpr OpType UPDATE =
    SingleOp_OpType_UPDATE;
  static inline bool OpType_IsValid(int value) {
    return SingleOp_OpType_IsValid(value);
  }
  static constexpr OpType OpType_MIN =
    SingleOp_OpType_OpType_MIN;
  static constexpr OpType OpType_MAX =
    SingleOp_OpType_OpType_MAX;
  static constexpr int OpType_ARRAYSIZE =
    SingleOp_OpType_OpType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OpType_descriptor() {
    return SingleOp_OpType_descriptor();
  }
  template<typename T>
  static inline const std::string& OpType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OpType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OpType_Name.");
    return SingleOp_OpType_Name(enum_t_value);
  }
  static inline bool OpType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OpType* value) {
    return SingleOp_OpType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kIdFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint64 Id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .rubble.SingleOp.OpType type = 4;
  void clear_type();
  ::rubble::SingleOp_OpType type() const;
  void set_type(::rubble::SingleOp_OpType value);
  private:
  ::rubble::SingleOp_OpType _internal_type() const;
  void _internal_set_type(::rubble::SingleOp_OpType value);
  public:

  // @@protoc_insertion_point(class_scope:rubble.SingleOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rubble_5fkv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class OpReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rubble.OpReply) */ {
 public:
  inline OpReply() : OpReply(nullptr) {}
  virtual ~OpReply();

  OpReply(const OpReply& from);
  OpReply(OpReply&& from) noexcept
    : OpReply() {
    *this = ::std::move(from);
  }

  inline OpReply& operator=(const OpReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpReply& operator=(OpReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpReply* internal_default_instance() {
    return reinterpret_cast<const OpReply*>(
               &_OpReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpReply& a, OpReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OpReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpReply* New() const final {
    return CreateMaybeMessage<OpReply>(nullptr);
  }

  OpReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpReply& from);
  void MergeFrom(const OpReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rubble.OpReply";
  }
  protected:
  explicit OpReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rubble_5fkv_5fstore_2eproto);
    return ::descriptor_table_rubble_5fkv_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepliesFieldNumber = 1,
  };
  // repeated .rubble.SingleOpReply replies = 1;
  int replies_size() const;
  private:
  int _internal_replies_size() const;
  public:
  void clear_replies();
  ::rubble::SingleOpReply* mutable_replies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::SingleOpReply >*
      mutable_replies();
  private:
  const ::rubble::SingleOpReply& _internal_replies(int index) const;
  ::rubble::SingleOpReply* _internal_add_replies();
  public:
  const ::rubble::SingleOpReply& replies(int index) const;
  ::rubble::SingleOpReply* add_replies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::SingleOpReply >&
      replies() const;

  // @@protoc_insertion_point(class_scope:rubble.OpReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::SingleOpReply > replies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rubble_5fkv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class SingleOpReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rubble.SingleOpReply) */ {
 public:
  inline SingleOpReply() : SingleOpReply(nullptr) {}
  virtual ~SingleOpReply();

  SingleOpReply(const SingleOpReply& from);
  SingleOpReply(SingleOpReply&& from) noexcept
    : SingleOpReply() {
    *this = ::std::move(from);
  }

  inline SingleOpReply& operator=(const SingleOpReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleOpReply& operator=(SingleOpReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleOpReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleOpReply* internal_default_instance() {
    return reinterpret_cast<const SingleOpReply*>(
               &_SingleOpReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SingleOpReply& a, SingleOpReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleOpReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleOpReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleOpReply* New() const final {
    return CreateMaybeMessage<SingleOpReply>(nullptr);
  }

  SingleOpReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleOpReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleOpReply& from);
  void MergeFrom(const SingleOpReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleOpReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rubble.SingleOpReply";
  }
  protected:
  explicit SingleOpReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rubble_5fkv_5fstore_2eproto);
    return ::descriptor_table_rubble_5fkv_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SingleOpReply_OpType OpType;
  static constexpr OpType GET =
    SingleOpReply_OpType_GET;
  static constexpr OpType PUT =
    SingleOpReply_OpType_PUT;
  static constexpr OpType DELETE =
    SingleOpReply_OpType_DELETE;
  static constexpr OpType UPDATE =
    SingleOpReply_OpType_UPDATE;
  static inline bool OpType_IsValid(int value) {
    return SingleOpReply_OpType_IsValid(value);
  }
  static constexpr OpType OpType_MIN =
    SingleOpReply_OpType_OpType_MIN;
  static constexpr OpType OpType_MAX =
    SingleOpReply_OpType_OpType_MAX;
  static constexpr int OpType_ARRAYSIZE =
    SingleOpReply_OpType_OpType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OpType_descriptor() {
    return SingleOpReply_OpType_descriptor();
  }
  template<typename T>
  static inline const std::string& OpType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OpType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OpType_Name.");
    return SingleOpReply_OpType_Name(enum_t_value);
  }
  static inline bool OpType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OpType* value) {
    return SingleOpReply_OpType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kStatusFieldNumber = 4,
    kOkFieldNumber = 1,
    kTypeFieldNumber = 6,
    kIdFieldNumber = 5,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string status = 4;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // .rubble.SingleOpReply.OpType type = 6;
  void clear_type();
  ::rubble::SingleOpReply_OpType type() const;
  void set_type(::rubble::SingleOpReply_OpType value);
  private:
  ::rubble::SingleOpReply_OpType _internal_type() const;
  void _internal_set_type(::rubble::SingleOpReply_OpType value);
  public:

  // int64 Id = 5;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:rubble.SingleOpReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  bool ok_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rubble_5fkv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class OpReplies PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rubble.OpReplies) */ {
 public:
  inline OpReplies() : OpReplies(nullptr) {}
  virtual ~OpReplies();

  OpReplies(const OpReplies& from);
  OpReplies(OpReplies&& from) noexcept
    : OpReplies() {
    *this = ::std::move(from);
  }

  inline OpReplies& operator=(const OpReplies& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpReplies& operator=(OpReplies&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpReplies& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpReplies* internal_default_instance() {
    return reinterpret_cast<const OpReplies*>(
               &_OpReplies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OpReplies& a, OpReplies& b) {
    a.Swap(&b);
  }
  inline void Swap(OpReplies* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpReplies* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpReplies* New() const final {
    return CreateMaybeMessage<OpReplies>(nullptr);
  }

  OpReplies* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpReplies>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpReplies& from);
  void MergeFrom(const OpReplies& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpReplies* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rubble.OpReplies";
  }
  protected:
  explicit OpReplies(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rubble_5fkv_5fstore_2eproto);
    return ::descriptor_table_rubble_5fkv_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
  };
  // repeated .rubble.OpReply reply = 1;
  int reply_size() const;
  private:
  int _internal_reply_size() const;
  public:
  void clear_reply();
  ::rubble::OpReply* mutable_reply(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::OpReply >*
      mutable_reply();
  private:
  const ::rubble::OpReply& _internal_reply(int index) const;
  ::rubble::OpReply* _internal_add_reply();
  public:
  const ::rubble::OpReply& reply(int index) const;
  ::rubble::OpReply* add_reply();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::OpReply >&
      reply() const;

  // @@protoc_insertion_point(class_scope:rubble.OpReplies)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::OpReply > reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rubble_5fkv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class Reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rubble.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {}
  virtual ~Reply();

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(nullptr);
  }

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rubble.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rubble_5fkv_5fstore_2eproto);
    return ::descriptor_table_rubble_5fkv_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rubble.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rubble_5fkv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class SyncRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rubble.SyncRequest) */ {
 public:
  inline SyncRequest() : SyncRequest(nullptr) {}
  virtual ~SyncRequest();

  SyncRequest(const SyncRequest& from);
  SyncRequest(SyncRequest&& from) noexcept
    : SyncRequest() {
    *this = ::std::move(from);
  }

  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncRequest& operator=(SyncRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncRequest* internal_default_instance() {
    return reinterpret_cast<const SyncRequest*>(
               &_SyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SyncRequest& a, SyncRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncRequest* New() const final {
    return CreateMaybeMessage<SyncRequest>(nullptr);
  }

  SyncRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncRequest& from);
  void MergeFrom(const SyncRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rubble.SyncRequest";
  }
  protected:
  explicit SyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rubble_5fkv_5fstore_2eproto);
    return ::descriptor_table_rubble_5fkv_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 1,
  };
  // string args = 1;
  void clear_args();
  const std::string& args() const;
  void set_args(const std::string& value);
  void set_args(std::string&& value);
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  std::string* mutable_args();
  std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // @@protoc_insertion_point(class_scope:rubble.SyncRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rubble_5fkv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class SyncReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rubble.SyncReply) */ {
 public:
  inline SyncReply() : SyncReply(nullptr) {}
  virtual ~SyncReply();

  SyncReply(const SyncReply& from);
  SyncReply(SyncReply&& from) noexcept
    : SyncReply() {
    *this = ::std::move(from);
  }

  inline SyncReply& operator=(const SyncReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncReply& operator=(SyncReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncReply* internal_default_instance() {
    return reinterpret_cast<const SyncReply*>(
               &_SyncReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SyncReply& a, SyncReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncReply* New() const final {
    return CreateMaybeMessage<SyncReply>(nullptr);
  }

  SyncReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncReply& from);
  void MergeFrom(const SyncReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rubble.SyncReply";
  }
  protected:
  explicit SyncReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rubble_5fkv_5fstore_2eproto);
    return ::descriptor_table_rubble_5fkv_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:rubble.SyncReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rubble_5fkv_5fstore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Op

// repeated .rubble.SingleOp ops = 1;
inline int Op::_internal_ops_size() const {
  return ops_.size();
}
inline int Op::ops_size() const {
  return _internal_ops_size();
}
inline void Op::clear_ops() {
  ops_.Clear();
}
inline ::rubble::SingleOp* Op::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:rubble.Op.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::SingleOp >*
Op::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:rubble.Op.ops)
  return &ops_;
}
inline const ::rubble::SingleOp& Op::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::rubble::SingleOp& Op::ops(int index) const {
  // @@protoc_insertion_point(field_get:rubble.Op.ops)
  return _internal_ops(index);
}
inline ::rubble::SingleOp* Op::_internal_add_ops() {
  return ops_.Add();
}
inline ::rubble::SingleOp* Op::add_ops() {
  // @@protoc_insertion_point(field_add:rubble.Op.ops)
  return _internal_add_ops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::SingleOp >&
Op::ops() const {
  // @@protoc_insertion_point(field_list:rubble.Op.ops)
  return ops_;
}

// -------------------------------------------------------------------

// SingleOp

// string key = 1;
inline void SingleOp::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SingleOp::key() const {
  // @@protoc_insertion_point(field_get:rubble.SingleOp.key)
  return _internal_key();
}
inline void SingleOp::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:rubble.SingleOp.key)
}
inline std::string* SingleOp::mutable_key() {
  // @@protoc_insertion_point(field_mutable:rubble.SingleOp.key)
  return _internal_mutable_key();
}
inline const std::string& SingleOp::_internal_key() const {
  return key_.Get();
}
inline void SingleOp::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleOp::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rubble.SingleOp.key)
}
inline void SingleOp::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rubble.SingleOp.key)
}
inline void SingleOp::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rubble.SingleOp.key)
}
inline std::string* SingleOp::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleOp::release_key() {
  // @@protoc_insertion_point(field_release:rubble.SingleOp.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleOp::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rubble.SingleOp.key)
}

// string value = 2;
inline void SingleOp::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SingleOp::value() const {
  // @@protoc_insertion_point(field_get:rubble.SingleOp.value)
  return _internal_value();
}
inline void SingleOp::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:rubble.SingleOp.value)
}
inline std::string* SingleOp::mutable_value() {
  // @@protoc_insertion_point(field_mutable:rubble.SingleOp.value)
  return _internal_mutable_value();
}
inline const std::string& SingleOp::_internal_value() const {
  return value_.Get();
}
inline void SingleOp::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleOp::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rubble.SingleOp.value)
}
inline void SingleOp::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rubble.SingleOp.value)
}
inline void SingleOp::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rubble.SingleOp.value)
}
inline std::string* SingleOp::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleOp::release_value() {
  // @@protoc_insertion_point(field_release:rubble.SingleOp.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleOp::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rubble.SingleOp.value)
}

// uint64 Id = 3;
inline void SingleOp::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SingleOp::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SingleOp::id() const {
  // @@protoc_insertion_point(field_get:rubble.SingleOp.Id)
  return _internal_id();
}
inline void SingleOp::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void SingleOp::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:rubble.SingleOp.Id)
}

// .rubble.SingleOp.OpType type = 4;
inline void SingleOp::clear_type() {
  type_ = 0;
}
inline ::rubble::SingleOp_OpType SingleOp::_internal_type() const {
  return static_cast< ::rubble::SingleOp_OpType >(type_);
}
inline ::rubble::SingleOp_OpType SingleOp::type() const {
  // @@protoc_insertion_point(field_get:rubble.SingleOp.type)
  return _internal_type();
}
inline void SingleOp::_internal_set_type(::rubble::SingleOp_OpType value) {
  
  type_ = value;
}
inline void SingleOp::set_type(::rubble::SingleOp_OpType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:rubble.SingleOp.type)
}

// -------------------------------------------------------------------

// OpReply

// repeated .rubble.SingleOpReply replies = 1;
inline int OpReply::_internal_replies_size() const {
  return replies_.size();
}
inline int OpReply::replies_size() const {
  return _internal_replies_size();
}
inline void OpReply::clear_replies() {
  replies_.Clear();
}
inline ::rubble::SingleOpReply* OpReply::mutable_replies(int index) {
  // @@protoc_insertion_point(field_mutable:rubble.OpReply.replies)
  return replies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::SingleOpReply >*
OpReply::mutable_replies() {
  // @@protoc_insertion_point(field_mutable_list:rubble.OpReply.replies)
  return &replies_;
}
inline const ::rubble::SingleOpReply& OpReply::_internal_replies(int index) const {
  return replies_.Get(index);
}
inline const ::rubble::SingleOpReply& OpReply::replies(int index) const {
  // @@protoc_insertion_point(field_get:rubble.OpReply.replies)
  return _internal_replies(index);
}
inline ::rubble::SingleOpReply* OpReply::_internal_add_replies() {
  return replies_.Add();
}
inline ::rubble::SingleOpReply* OpReply::add_replies() {
  // @@protoc_insertion_point(field_add:rubble.OpReply.replies)
  return _internal_add_replies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::SingleOpReply >&
OpReply::replies() const {
  // @@protoc_insertion_point(field_list:rubble.OpReply.replies)
  return replies_;
}

// -------------------------------------------------------------------

// SingleOpReply

// bool ok = 1;
inline void SingleOpReply::clear_ok() {
  ok_ = false;
}
inline bool SingleOpReply::_internal_ok() const {
  return ok_;
}
inline bool SingleOpReply::ok() const {
  // @@protoc_insertion_point(field_get:rubble.SingleOpReply.ok)
  return _internal_ok();
}
inline void SingleOpReply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void SingleOpReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:rubble.SingleOpReply.ok)
}

// string key = 2;
inline void SingleOpReply::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SingleOpReply::key() const {
  // @@protoc_insertion_point(field_get:rubble.SingleOpReply.key)
  return _internal_key();
}
inline void SingleOpReply::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:rubble.SingleOpReply.key)
}
inline std::string* SingleOpReply::mutable_key() {
  // @@protoc_insertion_point(field_mutable:rubble.SingleOpReply.key)
  return _internal_mutable_key();
}
inline const std::string& SingleOpReply::_internal_key() const {
  return key_.Get();
}
inline void SingleOpReply::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleOpReply::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rubble.SingleOpReply.key)
}
inline void SingleOpReply::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rubble.SingleOpReply.key)
}
inline void SingleOpReply::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rubble.SingleOpReply.key)
}
inline std::string* SingleOpReply::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleOpReply::release_key() {
  // @@protoc_insertion_point(field_release:rubble.SingleOpReply.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleOpReply::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rubble.SingleOpReply.key)
}

// string value = 3;
inline void SingleOpReply::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SingleOpReply::value() const {
  // @@protoc_insertion_point(field_get:rubble.SingleOpReply.value)
  return _internal_value();
}
inline void SingleOpReply::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:rubble.SingleOpReply.value)
}
inline std::string* SingleOpReply::mutable_value() {
  // @@protoc_insertion_point(field_mutable:rubble.SingleOpReply.value)
  return _internal_mutable_value();
}
inline const std::string& SingleOpReply::_internal_value() const {
  return value_.Get();
}
inline void SingleOpReply::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleOpReply::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rubble.SingleOpReply.value)
}
inline void SingleOpReply::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rubble.SingleOpReply.value)
}
inline void SingleOpReply::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rubble.SingleOpReply.value)
}
inline std::string* SingleOpReply::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleOpReply::release_value() {
  // @@protoc_insertion_point(field_release:rubble.SingleOpReply.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleOpReply::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rubble.SingleOpReply.value)
}

// string status = 4;
inline void SingleOpReply::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SingleOpReply::status() const {
  // @@protoc_insertion_point(field_get:rubble.SingleOpReply.status)
  return _internal_status();
}
inline void SingleOpReply::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:rubble.SingleOpReply.status)
}
inline std::string* SingleOpReply::mutable_status() {
  // @@protoc_insertion_point(field_mutable:rubble.SingleOpReply.status)
  return _internal_mutable_status();
}
inline const std::string& SingleOpReply::_internal_status() const {
  return status_.Get();
}
inline void SingleOpReply::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleOpReply::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rubble.SingleOpReply.status)
}
inline void SingleOpReply::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rubble.SingleOpReply.status)
}
inline void SingleOpReply::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rubble.SingleOpReply.status)
}
inline std::string* SingleOpReply::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleOpReply::release_status() {
  // @@protoc_insertion_point(field_release:rubble.SingleOpReply.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleOpReply::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rubble.SingleOpReply.status)
}

// int64 Id = 5;
inline void SingleOpReply::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SingleOpReply::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SingleOpReply::id() const {
  // @@protoc_insertion_point(field_get:rubble.SingleOpReply.Id)
  return _internal_id();
}
inline void SingleOpReply::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void SingleOpReply::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:rubble.SingleOpReply.Id)
}

// .rubble.SingleOpReply.OpType type = 6;
inline void SingleOpReply::clear_type() {
  type_ = 0;
}
inline ::rubble::SingleOpReply_OpType SingleOpReply::_internal_type() const {
  return static_cast< ::rubble::SingleOpReply_OpType >(type_);
}
inline ::rubble::SingleOpReply_OpType SingleOpReply::type() const {
  // @@protoc_insertion_point(field_get:rubble.SingleOpReply.type)
  return _internal_type();
}
inline void SingleOpReply::_internal_set_type(::rubble::SingleOpReply_OpType value) {
  
  type_ = value;
}
inline void SingleOpReply::set_type(::rubble::SingleOpReply_OpType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:rubble.SingleOpReply.type)
}

// -------------------------------------------------------------------

// OpReplies

// repeated .rubble.OpReply reply = 1;
inline int OpReplies::_internal_reply_size() const {
  return reply_.size();
}
inline int OpReplies::reply_size() const {
  return _internal_reply_size();
}
inline void OpReplies::clear_reply() {
  reply_.Clear();
}
inline ::rubble::OpReply* OpReplies::mutable_reply(int index) {
  // @@protoc_insertion_point(field_mutable:rubble.OpReplies.reply)
  return reply_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::OpReply >*
OpReplies::mutable_reply() {
  // @@protoc_insertion_point(field_mutable_list:rubble.OpReplies.reply)
  return &reply_;
}
inline const ::rubble::OpReply& OpReplies::_internal_reply(int index) const {
  return reply_.Get(index);
}
inline const ::rubble::OpReply& OpReplies::reply(int index) const {
  // @@protoc_insertion_point(field_get:rubble.OpReplies.reply)
  return _internal_reply(index);
}
inline ::rubble::OpReply* OpReplies::_internal_add_reply() {
  return reply_.Add();
}
inline ::rubble::OpReply* OpReplies::add_reply() {
  // @@protoc_insertion_point(field_add:rubble.OpReplies.reply)
  return _internal_add_reply();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rubble::OpReply >&
OpReplies::reply() const {
  // @@protoc_insertion_point(field_list:rubble.OpReplies.reply)
  return reply_;
}

// -------------------------------------------------------------------

// Reply

// bool ok = 1;
inline void Reply::clear_ok() {
  ok_ = false;
}
inline bool Reply::_internal_ok() const {
  return ok_;
}
inline bool Reply::ok() const {
  // @@protoc_insertion_point(field_get:rubble.Reply.ok)
  return _internal_ok();
}
inline void Reply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void Reply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:rubble.Reply.ok)
}

// -------------------------------------------------------------------

// SyncRequest

// string args = 1;
inline void SyncRequest::clear_args() {
  args_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SyncRequest::args() const {
  // @@protoc_insertion_point(field_get:rubble.SyncRequest.args)
  return _internal_args();
}
inline void SyncRequest::set_args(const std::string& value) {
  _internal_set_args(value);
  // @@protoc_insertion_point(field_set:rubble.SyncRequest.args)
}
inline std::string* SyncRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable:rubble.SyncRequest.args)
  return _internal_mutable_args();
}
inline const std::string& SyncRequest::_internal_args() const {
  return args_.Get();
}
inline void SyncRequest::_internal_set_args(const std::string& value) {
  
  args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SyncRequest::set_args(std::string&& value) {
  
  args_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rubble.SyncRequest.args)
}
inline void SyncRequest::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rubble.SyncRequest.args)
}
inline void SyncRequest::set_args(const char* value,
    size_t size) {
  
  args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rubble.SyncRequest.args)
}
inline std::string* SyncRequest::_internal_mutable_args() {
  
  return args_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SyncRequest::release_args() {
  // @@protoc_insertion_point(field_release:rubble.SyncRequest.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SyncRequest::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rubble.SyncRequest.args)
}

// -------------------------------------------------------------------

// SyncReply

// string message = 1;
inline void SyncReply::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SyncReply::message() const {
  // @@protoc_insertion_point(field_get:rubble.SyncReply.message)
  return _internal_message();
}
inline void SyncReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:rubble.SyncReply.message)
}
inline std::string* SyncReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:rubble.SyncReply.message)
  return _internal_mutable_message();
}
inline const std::string& SyncReply::_internal_message() const {
  return message_.Get();
}
inline void SyncReply::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SyncReply::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rubble.SyncReply.message)
}
inline void SyncReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rubble.SyncReply.message)
}
inline void SyncReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rubble.SyncReply.message)
}
inline std::string* SyncReply::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SyncReply::release_message() {
  // @@protoc_insertion_point(field_release:rubble.SyncReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SyncReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rubble.SyncReply.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rubble

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rubble::SingleOp_OpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubble::SingleOp_OpType>() {
  return ::rubble::SingleOp_OpType_descriptor();
}
template <> struct is_proto_enum< ::rubble::SingleOpReply_OpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubble::SingleOpReply_OpType>() {
  return ::rubble::SingleOpReply_OpType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rubble_5fkv_5fstore_2eproto
