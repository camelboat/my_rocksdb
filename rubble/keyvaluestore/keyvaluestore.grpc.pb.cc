// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: keyvaluestore.proto

#include "keyvaluestore.pb.h"
#include "keyvaluestore.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace keyvaluestore {

static const char* KeyValueStore_method_names[] = {
  "/keyvaluestore.KeyValueStore/Put",
  "/keyvaluestore.KeyValueStore/Get",
};

std::unique_ptr< KeyValueStore::Stub> KeyValueStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KeyValueStore::Stub> stub(new KeyValueStore::Stub(channel));
  return stub;
}

KeyValueStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Put_(KeyValueStore_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Get_(KeyValueStore_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::keyvaluestore::PutRequest, ::keyvaluestore::PutReply>* KeyValueStore::Stub::PutRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::keyvaluestore::PutRequest, ::keyvaluestore::PutReply>::Create(channel_.get(), rpcmethod_Put_, context);
}

void KeyValueStore::Stub::experimental_async::Put(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::keyvaluestore::PutRequest,::keyvaluestore::PutReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::keyvaluestore::PutRequest,::keyvaluestore::PutReply>::Create(stub_->channel_.get(), stub_->rpcmethod_Put_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::keyvaluestore::PutRequest, ::keyvaluestore::PutReply>* KeyValueStore::Stub::AsyncPutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::keyvaluestore::PutRequest, ::keyvaluestore::PutReply>::Create(channel_.get(), cq, rpcmethod_Put_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::keyvaluestore::PutRequest, ::keyvaluestore::PutReply>* KeyValueStore::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::keyvaluestore::PutRequest, ::keyvaluestore::PutReply>::Create(channel_.get(), cq, rpcmethod_Put_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::keyvaluestore::GetRequest, ::keyvaluestore::GetReply>* KeyValueStore::Stub::GetRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::keyvaluestore::GetRequest, ::keyvaluestore::GetReply>::Create(channel_.get(), rpcmethod_Get_, context);
}

void KeyValueStore::Stub::experimental_async::Get(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::keyvaluestore::GetRequest,::keyvaluestore::GetReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::keyvaluestore::GetRequest,::keyvaluestore::GetReply>::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::keyvaluestore::GetRequest, ::keyvaluestore::GetReply>* KeyValueStore::Stub::AsyncGetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::keyvaluestore::GetRequest, ::keyvaluestore::GetReply>::Create(channel_.get(), cq, rpcmethod_Get_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::keyvaluestore::GetRequest, ::keyvaluestore::GetReply>* KeyValueStore::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::keyvaluestore::GetRequest, ::keyvaluestore::GetReply>::Create(channel_.get(), cq, rpcmethod_Get_, context, false, nullptr);
}

KeyValueStore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< KeyValueStore::Service, ::keyvaluestore::PutRequest, ::keyvaluestore::PutReply>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::keyvaluestore::PutReply,
             ::keyvaluestore::PutRequest>* stream) {
               return service->Put(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< KeyValueStore::Service, ::keyvaluestore::GetRequest, ::keyvaluestore::GetReply>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::keyvaluestore::GetReply,
             ::keyvaluestore::GetRequest>* stream) {
               return service->Get(ctx, stream);
             }, this)));
}

KeyValueStore::Service::~Service() {
}

::grpc::Status KeyValueStore::Service::Put(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::keyvaluestore::PutReply, ::keyvaluestore::PutRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyValueStore::Service::Get(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::keyvaluestore::GetReply, ::keyvaluestore::GetRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace keyvaluestore

